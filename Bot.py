import requests
from bs4 import BeautifulSoup
from telegram import Bot
import time
import logging

# Telegram Bot API Token
API_TOKEN = 'YOUR_API_TOKEN'
CHAT_ID = '@your_group_name_or_chat_id'

bot = Bot(token=API_TOKEN)

# Login URL
login_url = 'https://mediateluk.com/sms/index.php?login'
login_data = {
    'user': 'your_username',  # ржЖржкржирж╛рж░ ржЗржЙржЬрж╛рж░ржирзЗржо
    'password': 'your_password'  # ржЖржкржирж╛рж░ ржкрж╛рж╕ржУрзЯрж╛рж░рзНржб
}

# Start a session to maintain the login state
session = requests.Session()

# Logging setup to show errors or status
logging.basicConfig(level=logging.INFO)

# Perform login
def login():
    try:
        login_response = session.post(login_url, data=login_data)
        if login_response.status_code == 200:
            logging.info('Login Successful')
        else:
            logging.error(f'Login Failed with status code {login_response.status_code}')
    except Exception as e:
        logging.error(f"Error during login: {str(e)}")

# "Today summaries" ржкрзЗржЬ рж▓рзЛржб ржХрж░рж╛
def get_summary_page():
    try:
        summary_url = 'https://mediateluk.com/sms/index.php?opt=shw_sum'
        summary_page = session.get(summary_url)
        summary_page.raise_for_status()  # To raise error for any HTTP issues
        return BeautifulSoup(summary_page.text, 'html.parser')
    except requests.exceptions.RequestException as e:
        logging.error(f"Error while fetching summary page: {str(e)}")
        return None

# OTP ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓рзЗ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржкрж╛ржарж╛ржирзЛ
def send_otp_to_telegram(otp_data, country_name, service_name):
    formatted_message = f"""
ЁЯЗ╕ЁЯЗж {country_name}
{service_name} ЁЭЧвЁЭШБЁЭЧ╜ ЁЭШ╛ЁЭЩдЁЭЩЩЁЭЩЪ ЁЭЩНЁЭЩЪЁЭЩШЁЭЩЪЁЭЩЮЁЭЩлЁЭЩЪЁЭЩЩЁЯОЙ

ЁЯФС ЁЭТАЁЭТРЁЭТЦЁЭТУ ЁЭС╢ЁЭС╗ЁЭС╖ ЁЭСкЁЭТРЁЭТЕЁЭТЖ: {otp_data}

тШОя╕П ЁЭС╡ЁЭТЦЁЭТОЁЭТГЁЭТЖЁЭТУ: 9665546****062
тЪЩя╕П ЁЭС║ЁЭТЖЁЭТУЁЭТЧЁЭТКЁЭТДЁЭТЖ: {service_name}
ЁЯМН ЁЭСкЁЭТРЁЭТЦЁЭТПЁЭТХЁЭТУЁЭТЪ: {country_name} ЁЯЗ╕ЁЯЗж
ЁЯУй ЁЭРЕЁЭРоЁЭРеЁЭРе ЁЭЧаЁЭЧоЁЭШАЁЭШАЁЭЧоЁЭЧ┤ЁЭЧ▓:
nullYour WhatsApp code {otp_data}

Don't share this code with others
"""
    try:
        bot.send_message(chat_id=CHAT_ID, text=formatted_message)
        logging.info(f"Sent OTP: {otp_data} from {country_name} ({service_name})")
    except Exception as e:
        logging.error(f"Error sending OTP to Telegram: {str(e)}")

# рж╕рзЗрж╢ржи рж╕рзНржЯрж╛рж░рзНржЯ ржХрж░рж╛
login()

# рзирзк ржШржгрзНржЯрж╛ ржмржЯ ржЪрж▓ржмрзЗ ржПржмржВ OTP ржЪрзЗржХ ржХрж░ржмрзЗ
def keep_checking_for_otp():
    last_sent_otp = None

    # ржжрзЗрж╢ ржПржмржВ рж╕рзЗржмрж╛ ржирж╛ржо ржЖрж▓рж╛ржжрж╛ ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрж╛
    country_names = [
        "Saudi Arabia", "United States", "United Kingdom", "India", "UAE", 
        "Brazil", "Russia", "Australia", "Canada", "South Africa"
    ]

    service_names = [
        "WhatsApp", "Viber", "Signal", "Telegram", "Messenger", "Skype"
    ]

    while True:
        soup = get_summary_page()
        if soup is None:  # If we fail to fetch the page, skip this loop and retry
            logging.error("Skipping this cycle due to failure in fetching the page.")
            time.sleep(60)  # Wait before retrying
            continue
        
        # SMS ржбрзЗржЯрж╛ рж╕ржВржЧрзНрж░рж╣ ржХрж░рж╛
        senders_data = soup.find_all('div', class_='sms-data')  # ржПржЦрж╛ржирзЗ class_name ржЖржкржирж╛рж░ ржкрзЗржЬ ржЕржирзБржпрж╛рзЯрзА рж╣ржмрзЗ

        for sender in senders_data:
            sender_info = sender.get_text().strip()
            
            # OTP ржЪрзЗржХ ржХрж░рж╛
            if 'OTP' in sender_info:  
                # OTP ржбрзБржкрзНрж▓рж┐ржХрзЗржЯ ржирж╛ рж╣рж▓рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗ
                if sender_info != last_sent_otp:
                    # рж╕ржорж╕рзНржд ржжрзЗрж╢рзЗрж░ ржЬржирзНржп ржкрзНрж░рждрж┐ржЯрж┐ рж╕рзЗржмрж╛рж░ OTP ржкрж╛ржарж╛ржирзЛ
                    for country_name in country_names:
                        for service_name in service_names:
                            send_otp_to_telegram(sender_info, country_name, service_name)  # OTP ржкрж╛ржарж╛ржирзЛ
                            logging.info(f"Sending OTP from {country_name} using {service_name}")
                    last_sent_otp = sender_info  # OTP ржЖржкржбрзЗржЯ ржХрж░рж╛
                else:
                    logging.info("Duplicate OTP, skipping.")
        
        time.sleep(60)  # ржкрзНрж░рждрж┐ рзз ржорж┐ржирж┐ржЯ ржкрж░ ржкрж░ ржЪрзЗржХ ржХрж░ржмрзЗ

# рзирзк ржШржгрзНржЯрж╛ ржЪрж▓ржорж╛ржи рж░рж╛ржЦрждрзЗ
keep_checking_for_otp()
